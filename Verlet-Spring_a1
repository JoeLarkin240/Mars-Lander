import numpy as np
import matplotlib.pyplot as plt

# Parameters
m = 1.0          # mass (kg)
k = 1.0          # spring constant (N/m)
omega = np.sqrt(k/m)
dt = 0.1        # time step (s)
steps = 100     # number of steps

# Initial conditions
x0 = 0        # initial displacement (m)
v0 = 1         # initial velocity (m/s)

# Arrays to store results
x = np.zeros(steps)
v = np.zeros(steps)
t = np.linspace(0, steps*dt, steps)

# Verlet initialization
x[0] = x0
a0 = -(k/m)*x0
# First step: use half-step Euler
x[1] = x0 + v0*dt + 0.5*a0*dt**2

# Verlet integration loop
for n in range(1, steps-1):
    a_n = -(k/m)*x[n]
    x[n+1] = 2*x[n] - x[n-1] + a_n*dt**2

# Estimate velocity from central difference
v[1:-1] = (x[2:] - x[:-2])/(2*dt)

# Plot results
plt.figure(figsize=(10,5))
plt.plot(t, x, label="Displacement (x)")
plt.plot(t, v, label="Velocity (v)", linestyle="--")
plt.title("Mass-Spring System (Verlet Integration)")
plt.xlabel("Time (s)")
plt.ylabel("Value")
plt.legend()
plt.grid(True)
plt.show()

#stability of this integration is lost above dt=2